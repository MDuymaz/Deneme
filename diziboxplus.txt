// ! Bu araç @keyiflerolsun tarafından | @KekikAkademi için yazılmıştır.

package com.SporCloud

import android.util.Log
import org.jsoup.nodes.Element
import com.lagradost.cloudstream3.* // CloudStream3 API'si
import com.lagradost.cloudstream3.utils.* // CloudStream3 yardımcı fonksiyonları

// DiziboxLive sınıfı, MainAPI sınıfından türetiliyor
class DiziboxLive : MainAPI() {
    // Ana URL, Dizibox.live'in ana sayfası
    override var mainUrl = "https://www.dizibox.live" // Dizibox.live ana URL'si
    override var name = "Dizibox Live" // API'nin adı
    override val hasMainPage = true // Ana sayfa mevcut
    override var lang = "tr" // Türkçe dilinde
    override val hasQuickSearch = false // Hızlı arama özelliği yok
    override val supportedTypes = setOf(TvType.Movie, TvType.TvSeries) // Film ve Dizi türlerini destekliyor

    // Ana sayfa kategorilerini tanımlıyoruz
    override val mainPage = mainPageOf(
        "${mainUrl}/tum-bolumler/page" to "Tüm Bölümler", // Ana sayfa kategorileri
        "${mainUrl}/yabanci-dizi-izle/page" to "Yabancı Dizi",
        "${mainUrl}/yabanci-film-izle/page" to "Yabancı Filmler",
        "${mainUrl}/yerli-dizi-izle/page" to "Yerli Dizi",
        "${mainUrl}/yerli-film-izle/page" to "Yerli Filmler",
        "${mainUrl}/netflix/page" to "Netflix",
        "${mainUrl}/animasyon-filmleri-izlesene/page" to "Animasyon"
    )

    // getMainPage fonksiyonu, ana sayfada yer alan içerikleri getiriyor
    override suspend fun getMainPage(page: Int, request: MainPageRequest): HomePageResponse {
        // URL'yi dinamik olarak oluşturuyoruz
        val url = "${request.data}/page/$page/"  // request.data: Kategori URL'si, page: Sayfa numarası

        // Sayfanın HTML dokümanını alıyoruz
        val document = app.get(url).document

        // Dizibox.live'deki her bir 'article.article-episode-card' elemanını seçiyoruz
        // Bu eleman her bir film veya dizi içeriğini temsil eder
        val home = document.select("article.article-episode-card").mapNotNull { it.toMainPageResult() }

        // Yeni HomePageResponse döndürüyoruz
        return newHomePageResponse(request.name, home)
    }

    // Her bir 'article.article-episode-card' elemanından gerekli bilgileri çıkarıyoruz
    private fun Element.toMainPageResult(): SearchResponse? {
        // Başlık (dizi veya film adı)
        val title = this.selectFirst("h3.title")?.text() ?: return null // Başlık, <h3> etiketinde yer alır
        // URL (film veya dizi sayfasına yönlendiren bağlantı)
        val href = fixUrlNull(this.selectFirst("a")?.attr("href")) ?: return null // Bağlantı adresi
        // Poster URL'si (film veya dizinin kapak görseli)
        val posterUrl = fixUrlNull(this.selectFirst("img")?.attr("data-src")) // Görselin veri kaynağı (data-src)

        // Eğer başlık ve URL varsa, yeni bir film/dizi arama cevabı oluşturuyoruz
        return newMovieSearchResponse(title, href, TvType.Movie) { this.posterUrl = posterUrl }
    }
}
